<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on rostrum.blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on rostrum.blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 25 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Translate R to English with {r2eng}</title>
      <link>/2020/10/25/r2eng/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/10/25/r2eng/</guid>
      <description>tl;dr  Communication is hard Amelia McNamara gave a talk at the useR! 2020 conference called ‘Speaking R’ (YouTube, slides).
To summarise greatly: R code should be speakable so that we can teach, learn and communicate with minimal friction. Arguably this has never been more needed given the massive expansion of remote working this year.
By ‘speakable’ we mean that we should be able to map consistently each R code element to an English phrase.</description>
    </item>
    
    <item>
      <title>Hit your reproducibility {targets}</title>
      <link>/2020/09/27/targets-dsfest/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/27/targets-dsfest/</guid>
      <description>An excuse to use the dam good (lol) beavers1 data (Nature on PBS via Giphy)  tl;dr I spoke at the UK Government Data Science Festival about Will Landau’s R package {targets} for workflow reproducibility. You can jump to the embedded slides below.
 {targets} Reproducibility is an important part of any data analysis. Will people be able to re-run your code from scratch on a different machine without you present?</description>
    </item>
    
    <item>
      <title>A Twitter bot with {rtweet} and GitHub Actions</title>
      <link>/2020/09/21/londonmapbot/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/21/londonmapbot/</guid>
      <description>@londonmapbot on Twitter.  tl;dr I made @londonmapbot: a simple Twitter bot that uses the R package {rtweet}, GitHub Actions and the Mapbox API. Find the source on Github.
 London from (socially-distant) space I’ve wanted to make a Twitter bot for a while, but it seemed like Hard Work. Spoiler: it’s not.
So, I’ve made @londonmapbot: a completely unsophisticated proof-of-concept Twitter bot.
What does it do? It posts a satellite image from random coordinates in Greater London (well, from a bounding box roughly within the M25 motorway) every half hour.</description>
    </item>
    
    <item>
      <title>Friendship ended with Google Analytics</title>
      <link>/2020/09/16/goatcounter-blogdown/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/16/goatcounter-blogdown/</guid>
      <description>mudasir.jpg  tl;dr This blog now uses GoatCounter instead of Google Analytics. GoatCounter is a lightweight and unobtrusive site-visit counter made by developer Martin Tournoij.
 Do blogposts dream of electric goats? I write posts on this blog for me and for other learners. It’s great if people find the content useful or interesting.
But I don’t and never will make money from this site, so why would I care how many visits it gets?</description>
    </item>
    
    <item>
      <title>Rate my RStudio setup</title>
      <link>/2020/09/15/rstudio-settings/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/15/rstudio-settings/</guid>
      <description>tl;dr I share my RStudio setup and some features of the IDE I often use. Tell me about your setup.
 Configuration IDEation R has a decent community online. People love to share opinions about design, customisation and workflow efficiencies. Why is there little at the intersection?
What I do see is people excited to hear about a checkbox or shortcut they never knew existed. I also hear from colleagues who are learning R and want to know more about customising their experience.</description>
    </item>
    
    <item>
      <title>{units} of uncleaned herring</title>
      <link>/2020/09/12/herring-units/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/12/herring-units/</guid>
      <description>The hex sticker is better than the package.  tl;dr I made the tiny R package {cran} to convert volumes to an antiquated measurement of fish. Why? To test out the {units} package and to resolve a joke about the Comprehensive R Archive Network (CRAN).
 {units} The {units} package by Edzer Pebesma, Thomas Mailund and James Hiebert (site, source, R Journal) helps you set and create units, convert between them and raise an error where that isn’t possible.</description>
    </item>
    
    <item>
      <title>Quick GitHub Actions for your R package</title>
      <link>/2020/08/09/ghactions-pkgs/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/09/ghactions-pkgs/</guid>
      <description>A GitHub Action in action on GitHub.  tl;dr You can trigger GitHub Actions to build and test your R package after a push or pull request. Create .github/workflows/ in your repo and add pre-prepared actions by the r-lib team with usethis::use_github_action().
 Lights, camera… GitHub Actions is a service that can be triggered to run workflows that build, test and deploy your code on GitHub. In other words, a continuous integration platform baked right into GitHub.</description>
    </item>
    
    <item>
      <title>Blogging with R on Raspberry Pi</title>
      <link>/2020/07/11/raspberry/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/11/raspberry/</guid>
      <description>Raspberry Pi 2 Model B (rostrum.blog limited edition)  tl;dr I installed R on a Raspberry Pi and set it up to use {blogdown}. This post was written from my Pi.
 A delicious Raspberry Pi The hardware The Raspberry Pi is a small, inexpensive, single-board computer designed to make computing and coding accessible to all. It’s also popular in the maker community given its support for various peripherals like cameras and sensors.</description>
    </item>
    
    <item>
      <title>Take a {ghdump} to download GitHub repos</title>
      <link>/2020/06/14/ghdump/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/14/ghdump/</guid>
      <description>My garbage GitHub repos being dumped onto my local machine (via openclipart.org, CC0 1.0)  tl;dr Run ghd_copy() from the {ghdump} package to either clone or download all the GitHub repositories for a given user. Intended for archival purposes or setting up a new computer.
The package comes with no guarantees and will likely be in a perpetual work-in-progress state. Please submit issues or pull requests.
 Clone army Situation:</description>
    </item>
    
    <item>
      <title>Animal Crossing Tinder with {shinysense}</title>
      <link>/2020/06/06/acnh-swipe/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/06/acnh-swipe/</guid>
      <description>Lily &amp;lt;3 4eva  tl;dr The villagers of Animal Crossing: New Horizons are taking part in a popularity contest and you’re the judge.
I made an R Shiny app where you swipe right if you like a randomly-presented villager and left if you dislike them.
Visit the app here and help decide the most popular villager! You can also visit the source code.
 Tidy Tuesday Tidy Tuesday is an open event for the R community.</description>
    </item>
    
    <item>
      <title>#PostcodePandemonium with {data.table}</title>
      <link>/2020/05/16/postcode-pandemonium/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/16/postcode-pandemonium/</guid>
      <description>Postcodes in Bath are unlikely to score highly (via Wikimedia)  tl;dr I used the R package {data.table} to find the highest- and lowest-scoring UK postcodes based on the sum of their numbers and letters (A = 1, B = 2, etc). You can jump to the results.
 The premise Yesterday I noticed that the hashtag #PostcodePandemonium was trending on Twitter.1 The premise was to sum the numbers and letters in your postcode, where the letters have been converted to their position in the alphabet (i.</description>
    </item>
    
    <item>
      <title>Make a README badge with {badgr}</title>
      <link>/2020/05/08/readme-badge/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/08/readme-badge/</guid>
      <description>{badgr} is definitely a bodge (CBeebies via Giphy)  tl;dr Sometimes a post on this blog is related to some code in a GitHub repository. I wanted to create a badge to link from that repo to the relevant post.
I’ve written a very basic package with a single very simple function—badgr::get_badge()—that generates a URL for a shields.io badge, which can then be placed in a repo’s README.
Here’s what the badge looks like (note the icon is subtly animated):</description>
    </item>
    
    <item>
      <title>AGÜEROOOOO with {ggsoccer} and {gganimate}</title>
      <link>/2020/05/02/aguerooooo/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/02/aguerooooo/</guid>
      <description>tl;dr I used R to animate the goal that won Manchester City the 2011/12 Premier League title in breathtaking fashion.
Inspired by Ryo Nakagawara, who makes awesome R-related soccer content that you can find on his site and on Twitter.1
 The problem Soccer has run dry.
Leagues have been cancelled or decided on a contentious points-per-game basis given that there’s no precedent. The fate of the 2019/20 English Premier League season is still unknown.</description>
    </item>
    
    <item>
      <title>Owning the shame of my old R code</title>
      <link>/2020/04/17/r-self-shame/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/17/r-self-shame/</guid>
      <description>Bemusement (all images from Brehm’s Life of Animals, 1895)  tl;dr In which I reflect on my past-self’s journey toward better R code.
This post suggests alternatives to file.choose(), setwd() and attach(); encourages sensible project structure; and talks about the benefit of writing functions.
 A startling discovery I dug up a time capsule from a decade ago. It contained poorly constructed R code.
Twist: it was me who wrote it.</description>
    </item>
    
    <item>
      <title>Plotception with {ggpattern}</title>
      <link>/2020/04/05/yo-dawg/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/05/yo-dawg/</guid>
      <description>Yo dawg Followers of this blog might remember the unveiling of cloud_pie(), the greatest new visualisation technique of the 21st Century.
Luckily, R-package machine mikefc of @coolbutuseless has released {ggpattern}, which lets you image- or pattern-fill the bars of your {ggplot2} plot. Most usefully with pictures of kittens or Bill Murray.
This has opened the door to yet another ground-breaking viz. The secret yet obvious real purpose of {ggpattern} is to put plots inside your plots.</description>
    </item>
    
    <item>
      <title>Repaying Tom Nook with {R6}</title>
      <link>/2020/04/04/repaying-tom-nook-with-r6/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/04/repaying-tom-nook-with-r6/</guid>
      <description>I assume the other villagers are happy with my choice of town flag.  tl;dr How would capitalist raccoon-dog Tom Nook simulate home-loan payments using R?1
I built a version of Animal Crossing’s Automatic Bell Dispenser (a kind of ATM/cashpoint) using Winston Chang’s {R6} package, inspired by an exercise from Hadley Wickham’s Advanced R book.
 What do those words mean? Animal Crossing Animal Crossing is a wholesome Nintendo videogame franchise in which you arrive on an island and befriend anthropomorphic animal villagers.</description>
    </item>
    
    <item>
      <title>Ninja scaffolding for {xaringan}</title>
      <link>/2020/03/22/ninja-scaffold/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/22/ninja-scaffold/</guid>
      <description>Example of modified Ninjutsu for ‘scaffolding’ a {xaringan} slide.  tl;dr Emi Tanaka‘s Ninjutsu CSS for {xaringan} breaks slides into ’cells’, which are useful for arranging plots, tables, etc. I’ve been experimenting with Emi’s CSS to create my own layouts.
 Slide themes The {xaringan} package by Yihui Xie – an implementation of remark.js – lets you create reproducible slides with R.
You can create your own themes for {xaringan} by supplying some CSS.</description>
    </item>
    
    <item>
      <title>Iterate parameterised {xaringan} reports</title>
      <link>/2020/03/12/knit-with-params/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/12/knit-with-params/</guid>
      <description>Driving a Wedge (via Giphy)  tl;dr You want to use R to generate multiple reports from a single template, each containing different data.
How? Create a parameterised RMarkdown template with a params YAML argument. Iterate over param values with rmarkdown::render() inside purrr::map().
I made a demo of this approach that focuses on parameterised {xaringan} slides. It includes a further {purrr} step with pagedown::chrome_print() to render the HTML outputs to PDF.</description>
    </item>
    
    <item>
      <title>Dear past self: blog</title>
      <link>/2020/02/27/get-blogging/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/02/27/get-blogging/</guid>
      <description>I’m pretty sure that {blogdown} is a bit easier than {printingpressdown} (Public Domain)  tl;dr There are many reasons to start that R blog you’ve been thinking about. First and foremost, do it for you.
 Why blog? I’ve stumbled into writing 50 posts on this blog. There was no plan. I have no strategy. It’s working so far.
My only regret was not starting sooner. How would I convince me-from-the-past?</description>
    </item>
    
    <item>
      <title>A Pokémon sprite carousel with {slickR}</title>
      <link>/2020/02/05/slickr/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/02/05/slickr/</guid>
      <description>Ride the carousel I was browsing GitHub and the {slickR} package by Jonathan Sidi was suggested as a repo to explore.
{slickR} is an htmlwidget that generates carousels using the Slick JavaScript library by Ken Wheeler.
You’ve seen carousels before. They’re pretty ubiquitous for scrolling horizontally through images on websites. {slickR} provides a neat way of embedding these in R Markdown documents and Shiny apps. Plus, the elements in the carousel can be basically anything (iframes, plots, etc), not just images.</description>
    </item>
    
    <item>
      <title>{orderly} and {drake} at Bioinformatics London</title>
      <link>/2020/01/31/reprobioinformatics/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/01/31/reprobioinformatics/</guid>
      <description>REPRODUCIBILITY 4 LYFE (via Bioinformatics London’s Meetup page)  tl;dr I spoke at the latest Bioinformatics London Meetup (event link, Twitter) about workflow reproducibility tools in R. I explained the benefits of Will Landau’s {drake} package for doing this.
 Order, order Rich FitzJohn opened proceedings with an excellent introduction to his {orderly} package (source) that is intended for ‘lightweight reproducible reporting’.
In short, the user declares inputs (anything, including things like SQL queries and CSV files) and artefacts (results) of their analysis.</description>
    </item>
    
    <item>
      <title>Reproducibility in R: three things</title>
      <link>/2020/01/22/repro-three-things/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/01/22/repro-three-things/</guid>
      <description>Avoid being this guy (Threddy the T. rex via Giphy)  Reproducevangelism I spoke at the Department for Education’s Data Science Week. I wanted everyone – newer and more experienced users alike – to learn at least one new thing about reproduciblity with R and RStudio.
The slides are embedded below and you can also get them fullscreen online (press ‘F’ for fullscreen and ‘P’ for presenter notes) and find the source on GitHub.</description>
    </item>
    
    <item>
      <title>Packages that Sparked Joy in 2019</title>
      <link>/2019/12/27/pkgs-2019/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/27/pkgs-2019/</guid>
      <description>Marie Kondo (Netflix via Giphy)  Thank you package-makers I’ve used a lot of packages in 2019 and many have brought great joy to my R experience. Thank you to everyone who has created, maintained or contributed to a package this year.
Some particular packages of note for me have been:
 🤖 {usethis} by Hadley Wickham and Jenny Bryan 🦆 {drake} by Will Landau 🐈 {purrr} by Lionel Henry and Hadley Wickham  And some honourable mentions are:</description>
    </item>
    
    <item>
      <title>Handle London travel data with {oystr}</title>
      <link>/2019/12/23/oystr/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/23/oystr/</guid>
      <description>tl;dr  Problem: I wanted to analyse my Transport for London (TfL) travel data Solution: I came up with the R package name {oystr} and a hex sticker design Practical solution: I actually wrote the package Self-flagellation: it has zero dependencies Further problem: TfL won’t give me information I need to complete it properly Result: blog it and move on Revelation: I’ve spent more than 53 days on TfL trains since Autumn 2014 😱   Clam-ouring for a package Transport for London (TfL) operates the travel system in London.</description>
    </item>
    
    <item>
      <title>{altcheckr}: check image alt text from R</title>
      <link>/2019/12/08/altcheckr/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/08/altcheckr/</guid>
      <description>tl;dr I’ve made a small R package called {altcheckr} that checks the accessibility of images on web pages. It has functions that (1) scrape attributes from HTML  elements on a web page and (2) apply simple rules to indicate the suitability of the alt text provided. To use:
remotes::install_github(&amp;quot;matt-dray/altcheckr&amp;quot;) images &amp;lt;- alt_get(&amp;quot;https://www.bbc.co.uk/news&amp;quot;) alt_check(images) I’m not an expert and the package has not been user tested.
 Accessibility A web site is accessible if everyone can engage with its content.</description>
    </item>
    
    <item>
      <title>A pivotal change to Software Carpentry</title>
      <link>/2019/11/27/pivot/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/27/pivot/</guid>
      <description>Via Frinkiac  tl;dr Teaching materials from The Carpentries depend on the community to amend and update them. This post is about my first proper contribution by helping to update the Software Carpentry lesson that teaches the R package {tidyr}.
Some helpful materials for learning about {tidyr}’s new pivot_*() functions:
 the {tidyr} vignette about pivoting Hiroaki Yutani’s slides — ‘A graphical introduction to tide’s pivot_*()’ Bruno Rodrigues’s blogpost — ‘Pivoting data frames just got easier thanks to pivot_wide() and pivot_long()’ Sharon Machlis’s video — ‘How to reshape data with tidyr’s new pivot functions’ Gavin Simpson’s blog — ‘Pivoting tidily’ (a real-world problem) I wrote a {tidyr} lesson for Tidyswirl, a Swirl course for learning the tidyverse from within R itself (read the blog post)   Contribute!</description>
    </item>
    
    <item>
      <title>Tidyswirl: a tidyverse Swirl course</title>
      <link>/2019/11/02/tidyswirl/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/02/tidyswirl/</guid>
      <description>Starting Swirl and selecting the tidyverse course  tl;dr Contribute to Tidyswirl: a Swirl course that lets people learn the tidyverse from within R.
 Swirl Swirl is a framework for learning R from within R itself. You can install it with install.packages(&amp;quot;swirl&amp;quot;). Swirl courses can be created by anyone and installed from nearly anywhere, though the Swirl course repository is the ‘official’ source.
I’ve written before about how the {swirlify} package makes it easier to create Swirl packages.</description>
    </item>
    
    <item>
      <title>Build an R package with {usethis}</title>
      <link>/2019/11/01/usethis/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/01/usethis/</guid>
      <description>Ossie, a Cabinet Office cat (via @cabinetofficeuk)  tl;dr  I gave a talk about creating an R package with helper functions from the {usethis} package In the session I created a new package from scratch called {cabinet} for identifying the cats that live in the UK Government’s Cabinet Office See the slides in a dedicated window or view their source See the {cabinet} package source and its website Jump to a list of other materials   Coffee packaging I gave a talk at a Cabinet Office Coffee &amp;amp; Coding session about building R packages from scratch.</description>
    </item>
    
    <item>
      <title>{blogsnip}: an RStudio addin package</title>
      <link>/2019/10/22/blogsnip/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/22/blogsnip/</guid>
      <description>Inserting a details block with the {blogsnip} addin  tl;dr On my commute home I made {blogsnip}: a tiny package of RStudio addins that add snippets of R code to help me write blog posts.
Install with:
install.packages(&amp;quot;remotes&amp;quot;) remotes::install_github(&amp;quot;matt-dray/blogsnip&amp;quot;)  The problem I’m lazy.
There’s some bits of code I often want to put in my blog posts (written in R Markdown) but I can’t remember them.
In particular:
 an expandable ‘details’ section1, which sometimes contains R session information and the date of the post’s last update (see examples throughout this previous post) a way to add an image with a caption and alt text that differ (like the gif at the top of this post), something that makes the images more accessible for users of screen readers, for example a link that opens in a new tab, rather than in the tab where you’re reading a post (as per this tweet by Albert Y Kim)  Originally I stored them in a GitHub Gist, but this is sub-optimal: the internet connection on my commute can be patchy.</description>
    </item>
    
    <item>
      <title>Git going: Git and GitHub</title>
      <link>/2019/10/21/git-github/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/21/git-github/</guid>
      <description>tl;dr Git is software on your computer that acts as a brain to store the version history of your files. Forget the discombobulation of file names like weasel-facts_FINAL.txt, weasel-facts_FINAL_comments.txt, etc, etc. GitHub is a website and cloud service for storing your version history remotely and for making collaboration easier.
Jump to:
 Summary Version control Step-by-Step What next Other resources   Summary This post is a basic and non-comprehensive introduction to Git and GitHub, with a focus on Mac users who are starting a project and working alone.</description>
    </item>
    
    <item>
      <title>How do you pronounce {dplyr}?</title>
      <link>/2019/09/20/say-package/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/20/say-package/</guid>
      <description>Get that oesophagus involved, why not? (Public Domain)  tl;dr It’s ‘d-ply-r’ according to Hadley himself… maybe.
What does it sound like when your computer tries to pronounce R package names? Is this an accessibility issue?
 Deep liar Sometimes I hear a word being spoken and think ‘oh wait, is that how it’s actually pronounced?’
I know people struggle with pronouncing R package names. They’re often hard to parse.</description>
    </item>
    
    <item>
      <title>The Carpentries: teach with live coding</title>
      <link>/2019/09/12/live-code/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/12/live-code/</guid>
      <description>An example of hardware carpentry, lol (Wikimedia Commons, CC BY-SA 2.0)  Carving new coders The Carpentries is a global non-profit initiative to help build foundational skills in coding and data science. For example, Software Carpentry contains lessons about the shell, git, R and Python, while Data Carpentry and Library Carpentry teach more domain-specific knowledge.
I took part in a two-day remote workshop to learn how to become a badged Carpentries instructor.</description>
    </item>
    
    <item>
      <title>{blogdown}: add metadata to Lithium-themed posts</title>
      <link>/2019/09/06/lithium-metadata/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/06/lithium-metadata/</guid>
      <description>Modifying lithium metal with heat (via Giphy)
 tl;dr Add author name, categories and tags to the posts of your Lithium-themed {blogdown} site. Might work for other themes.
 Lithium This blog is generated using Yihui Xie’s {blogdown}, which is built on the Hugo framework.
A number of site-wide themes have been ported for use with {blogdown}. This site uses the clean and simple Lithium theme by Jonathan Rutheiser, modified for {blogdown} by Yihui.</description>
    </item>
    
    <item>
      <title>{holepunch} a {drake} and put it in a Binder</title>
      <link>/2019/08/25/holepunch-drake/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/25/holepunch-drake/</guid>
      <description>tl;dr Binder lets people explore your GitHub-based R code in a live, browser-based instance of RStudio – for free. Set-up for R projects is quick with {holepunch}.
I’ve used {holepunch} on my {drake} demo repo. Click the ‘launch binder’ badge in the repo’s README.
 Icing on the {drake} I wrote about how Will Landau’s excellent {drake} package could be used to minimise errors and speed up the production of statistical reports by the UK government.</description>
    </item>
    
    <item>
      <title>Can {drake} RAP?</title>
      <link>/2019/07/23/can-drake-rap/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/23/can-drake-rap/</guid>
      <description>tl;dr The {drake} package records file interdependecies in your analysis. When files are changed, {drake} only re-runs the parts that need to be re-run. This saves time and reduces error.
This could be useful for Reproducible Analytical Pipelines (RAP), an automated approach to producing UK government statistics that minimises error and speeds production.
 Make it to make it Analysis projects can become complicated as multiple inputs, script files and outputs build up.</description>
    </item>
    
    <item>
      <title>The Mountain Goats with {trelliscopejs}</title>
      <link>/2019/06/20/goat-scope/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/20/goat-scope/</guid>
      <description>tl;dr I used {trelliscopejs} to make an interactive ‘small multiples’ display for The Mountain Goats discography.
You can interact with an embedded version below or click here to open full screen.
  Small multiples The {trelliscopejs} R package by Ryan Hafen harnesses the power of his trelliscopejs-lib JavaScript library.
What does it do? It provides an interactive interface for visualising, organising and exploring data visualisations in small multiples.
What are ‘small multiples’?</description>
    </item>
    
    <item>
      <title>A GitHub repo template for R analysis</title>
      <link>/2019/06/11/r-repo-template/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/11/r-repo-template/</guid>
      <description>Sharing is caring GitHub has introduced repository templates to make it easier to share frequently-used repo structures and boilerplate code. You can copy a whole repo as many times as you like, unlike forks.
Following a template can help keep your work organised and encourage consistency within and between projects. I can see this being useful for sharing optimal workflows across boundaries like government departments.
 Tada I’ve made a lightweight repo template to make it easier for me to start very simple analysis projects with R.</description>
    </item>
    
    <item>
      <title>Make a {brickr} soccer player</title>
      <link>/2019/05/31/brickr-soccer/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/31/brickr-soccer/</guid>
      <description>Virtual Lego {brickr} is a fun package by Ryan Timpe that lets you build 2D mosaics and 3D models with Lego-like virtual bricks,1 with a little help from Tyler Morgan Wall’s {rayshader} package.
Build 3D LEGO models &amp;amp; mosaics in #rstats! {brickr} is now on GitHub. More examples, How-To&#39;s, and vignettes coming soon. Can&#39;t wait to see what you all build! https://t.co/vBK0A70PTl pic.twitter.com/5kXRGta4jx — Ryan Timpe 📊 (@ryantimpe) 15 March 2019   You can get started with the brickr toybox, which lets you arrange bricks in a spreadsheet that {brickr} can turn into a 3D model.</description>
    </item>
    
    <item>
      <title>Package a {xaringan} template</title>
      <link>/2019/05/24/xaringan-template/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/24/xaringan-template/</guid>
      <description>A remarkable ninja The {xaringan} package by Yihui Xie implements remark.js1 in R Markdown so you can create exciting presentations that contain reproducible R content.2
Yihui has encouraged people to submit styles—like the RLadies theme—to enrich {xaringan}.
This post is about a specific theme I recreated for {xaringan} and shared in the {gdstheme} package along with an R Markdown template.
Click on the slides embedded below and cycle through with your arrow keys, or you can open them fullscreen in a dedicated browser tab.</description>
    </item>
    
    <item>
      <title>Teach a person to {swirl}</title>
      <link>/2019/05/10/swirlify/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/10/swirlify/</guid>
      <description>A metaphor for all the {swirl} courses you’ll make (via Giphy)  tl;dr Teach people to teach other people. That seems an efficient way to maximise impact.
 {swirl} lets people learn R from within R {swirlify} is a package to help write Swirl courses This post explains how to start a Swirl course with Swirlify For example, I’ve begun Tidyswirl for teaching tidyverse packages   Swirl Swirl is a platform that:</description>
    </item>
    
    <item>
      <title>Markov-chaining my PhD thesis II</title>
      <link>/2019/04/30/markov-chain-phd-2/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/30/markov-chain-phd-2/</guid>
      <description>This is science, I promise.  tl;dr A Markov chain perfectly summarises my entire PhD thesis:
 In general, litter chemical composition and decomposition.
  {markovifyR} I posted a while back about using a Markov chain to generate sentences using my PhD thesis as input. I also posted about the {markovifyR} package for generating lyrics by The Mountain Goats.
This is a quick update to that original post, but this time I’m using {markovifyR}.</description>
    </item>
    
    <item>
      <title>Generating the Mountain Goats lyrics</title>
      <link>/2019/04/25/gen-tmg-lyrics/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/25/gen-tmg-lyrics/</guid>
      <description>John Darnielle with the green-scaled slipcase for In League with Dragons (Merge Records, via Giphy)  The Mountain Goats released In League with Dragons today, their seventeenth studio album.
John Darnielle has written a lot of words across the Mountain Goat’s back catalogue. His lyrics are poetic and descriptive, covering fictional and autobiographical themes that include substance abuse, professional wrestling and cadaver-sniffing dogs.
Can we generate new Mountain Goats lyrics given this rich text data set?</description>
    </item>
    
    <item>
      <title>The Mountain Goats with {spotifyr}</title>
      <link>/2019/04/23/mountain-goats/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/23/mountain-goats/</guid>
      <description>Prepare the workspace library(spotifyr) library(dplyr) library(purrr) library(tidyr) You need to sign up for a Spotify developer account and add your client ID and client secret to the environment. This is passed to each of the functions of {spotifyr} to let us access the Spotify API.
access_token &amp;lt;- get_spotify_access_token()  Get albums The get_artist_albums() function takes an artist ID and fetches the albums for that artist.
The Mountain Goats can be identified by the URI spotify:artist:3hyGGjxu73JuzBa757H6R5, where the 22-character value is the artist ID used by {spotifyr}.</description>
    </item>
    
    <item>
      <title>A year of rostrum.blog</title>
      <link>/2019/04/14/one-year/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/14/one-year/</guid>
      <description>Happy first birthday 🎉 One year, visualised There’s been 27 posts on rostrum.blog in its first year, so about one every two weeks.
This interactive graphic shows the publishing frequency, where each dot is a post and the x-axis is time. Turn your mobile to landscape mode to see it in full.
 {&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[17635,17648,17663,17670,17676,17687,17708,17712,17724,17729,17738,17786,17798,17817,17839,17856,17860,17864,17889,17900,17914,17928,17941,17954,17959,17973,17993],&#34;y&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],&#34;text&#34;:[&#34;publish_date: 2018-04-14
title: R Trek: exploring stardates&#34;,&#34;publish_date: 2018-04-27
title: TWO DOGS IN TOILET ELDERLY LADY INVOLVED&#34;</description>
    </item>
    
    <item>
      <title>Fix leaky pipes in R</title>
      <link>/2019/04/07/fix-leaky-pipes/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/07/fix-leaky-pipes/</guid>
      <description>Data leaking from a pipe (via Giphy)  tl;dr You can chain function calls in R with %&amp;gt;%. There’s a few ways to catch errors in these pipelines.
 C’est un pipe You know R’s %&amp;gt;% (pipe) operator by now. It lets you chain function calls. It was created for Stefan Milton Bache and Hadley Wickham’s {magrittr} package and popularised by the tidyverse. Par exemple:
# {dplyr} for data manipulation # it also re-exports the pipe from {magrittr} library(dplyr) # Get mean sepal width for two iris species iris_pipe &amp;lt;- iris %&amp;gt;% filter(Species %in% c(&amp;quot;setosa&amp;quot;, &amp;quot;versicolor&amp;quot;)) %&amp;gt;% group_by(Species) %&amp;gt;% summarise(`Mean width` = mean(Sepal.</description>
    </item>
    
    <item>
      <title>A tidyverse functions quiz with {learnr}</title>
      <link>/2019/03/18/tidyverse-quiz/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/18/tidyverse-quiz/</guid>
      <description>tl;dr Can you match the tidyverse function to its package? I used {learnr} to make a ‘tidyquiz’ to test you.
A live version is available at https://mattdray.shinyapps.io/tidyquiz/
To run locally and get the very latest functions:
remotes::install_github(&#34;matt-dray/tidyquiz&#34;) to install {tidyquiz} (it’s a package!) library(tidyquiz) to load it learnr::run_tutorial(&#34;tidy&#34;, package = &#34;tidyquiz&#34;) to open in your browser   The problem I saw a (probably) tongue-in-cheek tweet recently from Ryan Timpe:</description>
    </item>
    
    <item>
      <title>Web scraping the {polite} way</title>
      <link>/2019/03/04/polite-webscrape/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/04/polite-webscrape/</guid>
      <description>Reaping with rvest Ah, salutations, and welcome to this blog post about polite web scraping. Please do come in. I’ll take your coat. How are you? Would you like a cup of tea? Oh, I insist!
Speaking of tea, perhaps you’d care to join me in genial conversation about it. Where to begin? Let’s draw inspiration from popular posts on the Tea subreddit of Reddit. I’ll fetch the post titles using the {rvest} package from Hadley Wickham and get the correct CSS selector using SelectorGadget by Andrew Cantino and Kyle Maxwell.</description>
    </item>
    
    <item>
      <title>What’s your Hadley Number?</title>
      <link>/2019/02/27/hadley-number/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/02/27/hadley-number/</guid>
      <description>A Bacon Number of zero and a Bacon Number of one (via Giphy)  tl;dr I made a Shiny app to demonstrate the Six Degrees of Kevin Bacon. Except it’s for CRAN authors. And Hadley Wickham is Kevin Bacon.
To help do this, I made the little package {kevinbacran} (as in ‘Kevin Bacon’ + ‘CRAN’, lol) to find the network separation between any two authors on CRAN.
 Six degrees People are connected to each other in networks.</description>
    </item>
    
    <item>
      <title>Graphing the Relayverse of podcasts</title>
      <link>/2019/02/14/relayverse/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/02/14/relayverse/</guid>
      <description>The Relay FM podcast network, visualised. View it here.  tl;dr I made an interactive graph network of the podcast host relationships on Relay FM using R. You can interact with it in a separate window and find out below how it was made.
I refreshed the data and style of the visualisation on 02 Jan 2020.
 Podcast networks Podcasting is becoming big business. Music-streaming giant Spotify just acquired the podcast network Gimlet for a reported $200 million.</description>
    </item>
    
    <item>
      <title>Git going: the command line</title>
      <link>/2019/02/01/git-going-cl/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/02/01/git-going-cl/</guid>
      <description>Examples of inputs and outputs at the command line  tl;dr This post is a basic introduction to the command line, focusing on macOS’s Terminal. Here are some commonly-used commands:
  Command Example Short explanation    pwd pwd Print working directory  cd cd &amp;lt;filepath&amp;gt; Change directory  ls ls List folder contents  mkdir mkdir &amp;lt;folder name&amp;gt; Make directory (folder)  touch touch &amp;lt;filename&amp;gt; Create a file  nano nano &amp;lt;filename&amp;gt; Open Nano editor  open open &amp;lt;filename&amp;gt; Open a file in its default program  mv mv &amp;lt;filename&amp;gt; &amp;lt;filepath&amp;gt; Move a file  rm rm &amp;lt;filename&amp;gt; Remove (delete) a file  man man &amp;lt;command name&amp;gt; Manual for a command     New Year’s R-solution People shared recently on Twitter their R goals for 2019 (see Maëlle Salmon’s post).</description>
    </item>
    
    <item>
      <title>Deer-vehicle collisions: a Shiny app</title>
      <link>/2019/01/18/deer-collisions/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/18/deer-collisions/</guid>
      <description>Roe deer by Marek Szczepanek, CC BY-SA 4.0  Open data Deer roam Scotland. So do humans. It’s a problem when they meet at high speed.
The National Deer-Vehicle Collisions Project, administered by The Deer Initiative, has been monitoring data on deer-vehicle collisions in the UK.
The data are open. I found the data set when skimming through data.gov.uk (a classic weekend activity for all the family). It links to the SNH Natural Spaces site where you can download the data as shapefile, GML or KML under the Open Government Licence.</description>
    </item>
    
    <item>
      <title>Motivate yourself with an .Rprofile</title>
      <link>/2019/01/04/rprofile-motivate/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/04/rprofile-motivate/</guid>
      <description>My dream is to pet this kitty (via Giphy)  What’s an R profile? It’s a file that contains R code that runs when you start or restart R. You can use it to customise your environment. For example, you could set options, create functions or load packages.
There’s lots of information in the R startup chapter of Colin Gillespie’s’s Efficient R Programming book.
But beware: use of an R profile may not be particularly reproducible if the .</description>
    </item>
    
    <item>
      <title>Travel the NBA with {rvest}, {leaflet} and {osrm}</title>
      <link>/2018/12/24/nba-travel/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/24/nba-travel/</guid>
      <description>Classic Jazz: Stockton to Malone for the dunk (via Giphy)  tl;dr The {osrm} R package can retrieve from the OSRM API the travel duration between points. I looked at these data for NBA basketball-team arenas, whose details I scraped from the web using {rvest} and mapped with {leaflet}.</description>
    </item>
    
    <item>
      <title>Change your {blogdown} fonts</title>
      <link>/2018/11/29/fontface-lithium/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/29/fontface-lithium/</guid>
      <description>Lithium by Nirvana (via Giphy)  tl;dr Want to change the font for your {blogdown} site? I’ve been using this workflow:
Find a font on the Google Fonts site Search for the font name on the independent Google Web Fonts Helper Download the zip file from the Helper, then copy all the files to static/fonts/ folder Copy the CSS from the Helper into your static/css/fonts.css file   Not my type You can change the default font face for your {blogdown} blog with freely-available files from Google Fonts.</description>
    </item>
    
    <item>
      <title>Quantify colour by {magick}</title>
      <link>/2018/11/25/art-of-the-possible/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/25/art-of-the-possible/</guid>
      <description>‘Walrus rainbow vomit’ is a sentence I’d never thought I’d type (via Giphy)  Colour search Lots of online services let you sort images by colour. Some examples:
 Google Arts &amp;amp; Culture Designspiration TinEye Multicolr  These services must have extracted and quantified each image’s colours. There’s probably a way of doing this in R, so let’s give it a go.
By ‘simple’ I mean we’re not going to do any hard work or consider any colour theory.</description>
    </item>
    
    <item>
      <title>Waggle dance with {ggbeeswarm} and {emoGG}</title>
      <link>/2018/11/21/waggle-dance/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/21/waggle-dance/</guid>
      <description>A bee scene from irreverent 90s Nicktoon ‘Hey Arnold!’ (via Giphy)  How to plot grouped continuous data? A boxplot lets you show continuous data split by categories, but it hides the data points and doesn’t tell you much about distribution. A violin chart will show the distribution but you still don’t know about the density of data.
Stripcharts show the data for each category as individual points. The points can be layered on top of each other where they take the same Y value and can be stretched arbitrarily along the X axis.</description>
    </item>
    
    <item>
      <title>Teaching R with Pokémon Go data</title>
      <link>/2018/11/04/r-train-pkmn/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/04/r-train-pkmn/</guid>
      <description>Psyduck hurt itself in its confusion (via Giphy)  You teach me and I’ll teach you I wrote in a recent post about some training materials I wrote for teaching R Markdown.
Now I’m sharing another thing I made: Beginner R and RStudio Training (featuring Pokémon!). It’s an introduction to R, RStudio, R Projects, directory structure and the tidyverse. It uses Pokémon Go1 data that I collected myself.2
You can:</description>
    </item>
    
    <item>
      <title>R session info info</title>
      <link>/2018/10/13/sessioninfo/</link>
      <pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/13/sessioninfo/</guid>
      <description>US Attorney-General Jeff Sessions-Info (via Giphy)  Session info? What Session info is just some details about your working environment like your version of R, the locale it’s running from and any loaded packages.
It gives a snapshot to help people reproduce what you’ve done or spot any anomalies. You might get asked for this if someone is diagnosing your R problem. You may also see it at the end of blog posts or reports.</description>
    </item>
    
    <item>
      <title>Knitting Club: R Markdown for beginners</title>
      <link>/2018/09/24/knitting-club/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/09/24/knitting-club/</guid>
      <description>Knitting simulator by Kara Stone and Gabby DaRienzo (via Giphy)  tl;dr I made a couple of training resources about R Markdown for reproducibility:
 Knitting Club (see the slides or source) Quick R Markdown (see the slides or source).  Click the resource names to jump straight to those sections.
 Reproducibility It’s often important to recreate and verify prior work, as well as update it in future as data changes.</description>
    </item>
    
    <item>
      <title>EARL 2018: {crosstalk} in memes</title>
      <link>/2018/09/12/crosstalk-memes/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/09/12/crosstalk-memes/</guid>
      <description>EARL 2018 I gave a talk called ‘Crosstalk: Shiny-like without Shiny’1 at the 2018 EARL conference in London.
The {crosstalk} package by Joe Cheng allows htmlwidgets—JavaScript visualisations wrapped in R code—to interact with each other. Filtering the data in widget causes all widgets to be filtered. This can be done inside an R Markdown document (including Flexdashboard) for easy server-less sharing in HTML format.</description>
    </item>
    
    <item>
      <title>Engifification in R with {gifski}</title>
      <link>/2018/07/26/engifification-in-r-with-gifski/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/26/engifification-in-r-with-gifski/</guid>
      <description>A sloth. On a pizza slice. In space. (via Giphy)  gifski() You and I both know that the world needs more intergalatic-sloth-pizza gifs.
Great news: ‘the fastest gif encoder in the universe’ has been created. The {gifski} package for R is now on CRAN. It’s a simple yet fast and powerful way to create gifs from within R, built by Jeroen Ooms) for rOpenSci.
The obvious application is for creating gifs from plots, as in the following example from the ROpenSci announcement, which shows life expectancy by GDP per capita with a different year for each frame of the gif.</description>
    </item>
    
    <item>
      <title>Footballers are younger than you</title>
      <link>/2018/07/17/world-cup-age-app/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/17/world-cup-age-app/</guid>
      <description>tl;dr I wrote an R Shiny app that tells you how many players at World Cup 2018 were younger than you. It’s designed to make you feel old. You’re welcome.
Here’s some solid reviews I’ve received so far:
 Very depressing
  I knew I was too old to become a great footballer
  Just what I needed to see
 Thanks folks!
 I was at the World Cup Final Extremely rare and valuable tickets for the (CONIFA) World Cup final  So the World Cup is over for another year.</description>
    </item>
    
    <item>
      <title>How accessible is my post about accessibility?</title>
      <link>/2018/07/12/accessible-accessibility/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/12/accessible-accessibility/</guid>
      <description>The accessibility empathy lab at the Government Digital Services building  Digital accessibility I wrote about an accessibility workshop at the recent Sprint 18 conference.
I’ve since been to a more in-depth workshop with Government Digital Service (GDS), who have just launched the latest version of their ‘testing for accessibility’ guidance in the Service Manual and also the GOV.UK Design System, which contains reusable GOV.UK styles, patterns and components with accessibility in mind.</description>
    </item>
    
    <item>
      <title>Markov-chaining my PhD thesis</title>
      <link>/2018/06/30/markov-chain-phd/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/30/markov-chain-phd/</guid>
      <description>This. Is. Science.  tl;dr I wrote a thesis, but a Markov chain can rewrite it and make about as much sense as the original.
See also an updated version of this blog for a better approach.
 Doc rot I wrote a PhD thesis in 2014 called ‘Effects of multiple environmental stressors on litter chemical composition and decomposition’. See my viva presentation slides here if you don’t really like words.</description>
    </item>
    
    <item>
      <title>Mail merge with R and Dawson&#39;s Creek</title>
      <link>/2018/06/26/mail-merge/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/26/mail-merge/</guid>
      <description>Dawson’s Creek’s Dawson leaks  tl;dr You have customer details. You want to send each person a personalised letter from a template. You want to mail merge, basically.
This post shows how you can use R to iteratively produce separate Microsoft Word reports from a common template, each one with slightly different data. Here I use R Markdown and the {knitr} package to render a separate report about each episode of Dawson’s Creek (a classic use case!</description>
    </item>
    
    <item>
      <title>Tid-ye-text with geniusr</title>
      <link>/2018/06/05/tid-ye-text/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/05/tid-ye-text/</guid>
      <description>Matt Dray
⚠️ Warning: this post contains offensive words. ⚠️
Genius? Kanye West released his latest album – ye – last week1 after a(nother) pretty turbulent and controversial period of his life2. So what’s been on his mind?
I think the real question is why don’t we scrape Yeezus’s lyrics from the web and analyse them using R? Obviously.
 Genius Genius is a website where you can upload and comment on song lyrics.</description>
    </item>
    
    <item>
      <title>Cloudy with a chance of pie</title>
      <link>/2018/05/25/cloud-pie/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/25/cloud-pie/</guid>
      <description>The pinnacle of visualisation Great news everyone: I’ve taken the best of two stellar data visualisations and smashed them together into something that can only be described as perfection.
Let me set the scene. There’s three things we can agree on:
Everyone loves pie charts, particularly when they’re in 3D, exploded and tilted. Word clouds aren’t at all overused. I have too much time on my hands.  With that in mind, I’ve artfully melded clouds and pies into the function cloud_pie(), which I think sounds rather sweet.</description>
    </item>
    
    <item>
      <title>Pokéballs in Super Smash Bros</title>
      <link>/2018/05/19/pokeballs-in-super-smash-bros/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/19/pokeballs-in-super-smash-bros/</guid>
      <description>Smash! Super Smash Bros (SSB) is a beat ’em up videogame series featuring characters from various Nintendo franchises and beyond.
The series has featured on Nintendo 64 (Super Smash Bros, 1998), Gamecube (SSB Melee, 2001), Wii (SSB Brawl, 2008), Wii U and 3DS (SSB ‘4’, 2014) and an upcoming title for the Switch console.
The game is popular enough to have resulted in a series of organised tournaments1.
You can fight characters directly but you can also make use of items and weapons from games across the Nintendo universe, such as the mushroom (the Super Mario series), the heart container (Zelda) and the home run bat (EarthBound).</description>
    </item>
    
    <item>
      <title>Accessibility workshop at #Sprint18</title>
      <link>/2018/05/12/accessibility-workshop-at-sprint18/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/12/accessibility-workshop-at-sprint18/</guid>
      <description>Sprinting Sprint events are a chance for the government digital, data, design and technology community to:
 look back on the work we’ve been doing to transform government and to look forward at what we need to do
 Kevin Cunnington (@kevincunnington), Director General of the Government Digital Service (GDS), outlined this in a recent blog post.
This year’s major themes were transformation, innovation and collaboration. The event was held at the Southbank Centre and Royal Festival Hall in London, with 40 speakers, 19 workshops and over 700 delegates representing 40 departments and agencies.</description>
    </item>
    
    <item>
      <title>TWO DOGS IN TOILET ELDERLY LADY INVOLVED</title>
      <link>/2018/04/27/two-dogs-in-toilet-elderly-lady-involved/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/27/two-dogs-in-toilet-elderly-lady-involved/</guid>
      <description>Matt Dray (@mattdray)
Call the fire brigade. Oh wait, we’re fine.
 TL;DR Animals get stuck in weird places, just ask the London Fire Brigade. I used the sf package for handling some animal rescue spatial data prior to interactive mapping with leaflet. Scroll to the bottom to see the map.
 The problem Sometimes I work with eastings and northings coordinate data.</description>
    </item>
    
    <item>
      <title>R Trek: exploring stardates</title>
      <link>/2018/04/14/r-trek-exploring-stardates/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/14/r-trek-exploring-stardates/</guid>
      <description>Captain’s log  Star date 71750.51. Our mission is to use R statistical software to extract star dates mentioned in the captain’s log from the scripts of Star Trek: The Next Generation and observe their progression over the course of the show’s seven seasons. There appears to be some mismatch in the frequency of digits after the decimal point – could this indicate poor ability to choose random numbers?</description>
    </item>
    
  </channel>
</rss>